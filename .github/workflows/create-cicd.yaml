name: Django ECS CI/CD Pipeline

on:
  push:
    branches:
      - cicd

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # GitHub variables that will be used in the workflow
      ENVIRONMENT: prod
      PROJECT_NAME: dbk-blog
      ECS_CONTAINER_NAME: dbk-blog
      APP_DOCKER_FILE_PATH: ./Dockerfile.app.prod
      NGINX_DOCKER_FILE_PATH: ./Dockerfile.nginx.prod
      APP_PORT: 8000
      NGINX_PORT: 80
      CLOUDFORMATION_CICD_TEMPLATE_FILE: cicd.yaml
      PipelineApproverEmail: dhanbdrkarki1111@gmail.com  

    steps:
      # Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3
      
      # Set up AWS credentials using GitHub Secrets
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # Install Cloudformation template validation tool
      - name: Install cfn-lint
        run: |
          pip install cfn-lint

      # Validate Cloudformation Template
      - name: Lint CloudFormation template
        run: |
          cfn-lint cicd.yaml infra.yaml

      # Create Parameter Store parameters
      - name: Create SSM Parameters
        run: |
          # Database credentials
          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/database/engine" \
            --value "${{ secrets.DB_ENGINE }}" \
            --type "String" \
            --overwrite

          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/database/username" \
            --value "${{ secrets.DB_USER }}" \
            --type "String" \
            --overwrite

          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/database/password" \
            --value "${{ secrets.DB_PASSWORD }}" \
            --type "SecureString" \
            --overwrite

          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/database/name" \
            --value "${{ secrets.DB_NAME }}" \
            --type "String" \
            --overwrite

          # Django settings
          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/app/secret_key" \
            --value "${{ secrets.DJANGO_SECRET_KEY }}" \
            --type "SecureString" \
            --overwrite

          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/app/debug_status" \
            --value "${{ secrets.DEBUG_STATUS }}" \
            --type "String" \
            --overwrite

          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/app/django_settings_module" \
            --value "${{ secrets.DJANGO_SETTINGS_MODULE }}" \
            --type "String" \
            --overwrite

          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/app/allowed_hosts" \
            --value "${{ secrets.DJANGO_ALLOWED_HOSTS }}" \
            --type "String" \
            --overwrite

          # Django superuser
          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/app/superuser/username" \
            --value "${{ secrets.DJANGO_SUPERUSER_USERNAME }}" \
            --type "String" \
            --overwrite

          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/app/superuser/password" \
            --value "${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" \
            --type "SecureString" \
            --overwrite

          aws ssm put-parameter \
            --name "/${PROJECT_NAME}/${ENVIRONMENT}/app/superuser/email" \
            --value "${{ secrets.DJANGO_SUPERUSER_EMAIL }}" \
            --type "String" \
            --overwrite

      # Deploy CloudFormation Stack
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name $PROJECT_NAME-cicd \
            --template-file $CLOUDFORMATION_CICD_TEMPLATE_FILE \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              Environment=$ENVIRONMENT \
              ProjectName=$PROJECT_NAME \
              GitHubRepoId=${{ github.repository }} \
              GitHubBranch=${{ github.ref_name }} \
              CodeStarConnectionArn=${{ secrets.CODESTAR_CONNECTION_ARN }} \
              EcsContainerName=$ECS_CONTAINER_NAME \
              AppDockerFilePath=$APP_DOCKER_FILE_PATH \
              NginxDockerFilePath=$NGINX_DOCKER_FILE_PATH \
              AppPort=$APP_PORT \
              NginxPort=$NGINX_PORT \
              ApproverEmail=$PipelineApproverEmail
      
      # Verify CloudFormation Stack Success
      - name: Verify deployment
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name $PROJECT_NAME-cicd \
            --query 'Stacks[0].StackStatus' \
            --output text)
          
          echo "Stack deployment status: $STACK_STATUS"
          if [[ "$STACK_STATUS" != "CREATE_COMPLETE" && "$STACK_STATUS" != "UPDATE_COMPLETE" ]]; then
            echo "CloudFormation stack deployment failed with status: $STACK_STATUS"
            exit 1
          fi

