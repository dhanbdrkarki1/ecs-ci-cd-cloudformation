AWSTemplateFormatVersion: '2010-09-09'
Description: Three-Tier ECS Application

Parameters:
  ProjectName:
    Type: String
    Default: blog
    Description: The name of the project.

  Environment:
    Type: String
    Description: Environment name
    Default: dev

  # ECS Params
  AppPort:
    Type: Number
    Description: Container port for application

  NginxPort:
    Type: Number
    Description: Container port for nginx

  # VPC Params
  VPCBlock:
    Type: String
    Description: CIDR block for the VPC

  PublicSubnet1Block:
    Type: String
    Description: CIDR block for the public subnet in the first region

  PublicSubnet2Block:
    Type: String
    Description: CIDR block for the public subnet in second region

  PrivateSubnet1Block:
    Type: String
    Description: CIDR block for the private subnet in the first region

  PrivateSubnet2Block:
    Type: String
    Description: CIDR block for the private subnet in second region

  PrivateSubnet3Block:
    Type: String
    Description: CIDR block for the third private subnet in the first region

  PrivateSubnet4Block:
    Type: String
    Description: CIDR block for the fourth private subnet in second region

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-vpc"


  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway and EIP for private subnet internet access
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-rtb-public"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Private Route Tables
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-rtb-private1-${!Select [0, !GetAZs !Ref 'AWS::Region']}"

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-rtb-private2-${!Select [0, !GetAZs !Ref 'AWS::Region']}"

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-rtb-private3-${!Select [0, !GetAZs !Ref 'AWS::Region']}"

  PrivateRouteTable4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-rtb-private4-${!Select [0, !GetAZs !Ref 'AWS::Region']}"

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Block
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-subnet-public1-${!Select [0, !GetAZs !Ref 'AWS::Region']}"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Block
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-subnet-public2-${!Select [1, !GetAZs !Ref 'AWS::Region']}"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Block
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-subnet-private1-${!Select [0, !GetAZs !Ref 'AWS::Region']}"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Block
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-subnet-private2-${!Select [1, !GetAZs !Ref 'AWS::Region']}"


  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3Block
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-subnet-private3-${!Select [0, !GetAZs !Ref 'AWS::Region']}"


  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet4Block
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-subnet-private4-${!Select [1, !GetAZs !Ref 'AWS::Region']}"

  # Routes
  # Route for private subnet1 internet access via NAT Gateway
  PrivateSubnet1Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Route for private subnet 2 internet access via NAT Gateway
  PrivateSubnet2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Subnet Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable4


  #######################
  # Amazon S3
  #######################
  # S3 Bucket for Static Files
  StaticFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${Environment}-static-files
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']  # In production, restrict to your domain
            MaxAge: 3000

  # Bucket Policy for Public Read Access
  StaticFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticFilesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub ${StaticFilesBucket.Arn}/*

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb-sg

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks in private subnets
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref NginxPort
          ToPort: !Ref NginxPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow ecs task access from load balancer
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow Explict outbound access
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-sg

  # ALB Configuration
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: !Ref NginxPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: !Ref AppPort
      HealthCheckPath: /health/
      HealthCheckIntervalSeconds: 180
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb-tg

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP


  ##################################
  # Elastic Container Service
  ##################################

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ProjectName}-${Environment}-cluster"
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-cluster

  # dedicated security group for VPC endpoints
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ECSSecurityGroup
          Description: HTTPS from ECS tasks
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS to AWS services
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-vpc-endpoints-sg


  # For ECR Docker Registry
  ECRDkrVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !GetAtt VPCEndpointSecurityGroup.GroupId

  # For ECR API
  ECRApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !GetAtt VPCEndpointSecurityGroup.GroupId

  # S3 Gateway Endpoint (needed for both ECR and static files)
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow access to ECR bucket
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::prod-${AWS::Region}-starport-layer-bucket/*
              - !Sub arn:aws:s3:::prod-${AWS::Region}-starport-layer-bucket
          # Allow access to application static files
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - !GetAtt StaticFilesBucket.Arn
              - !Sub ${StaticFilesBucket.Arn}/*
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2

  # Cloudwatch log group for ECS
  ECSCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-log

  # ECS Execution Role (used by ECS agent to pull images, write logs)
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: 
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ProjectName}-app
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ProjectName}-nginx
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt ECSCloudWatchLogGroup.Arn
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/*
        - PolicyName: S3StaticFilesAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt StaticFilesBucket.Arn
                  - !Sub ${StaticFilesBucket.Arn}/*
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-execution-role

  # ECS Task Role (used by application code) to allow S3 access
  ECSApplicationTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-ECSApplicationTaskRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt StaticFilesBucket.Arn
                  - !Sub ${StaticFilesBucket.Arn}/*
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-app-role

  # ECS Task Definition and Service
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn # Role used by ECS infrastructure
      TaskRoleArn: !GetAtt ECSApplicationTaskRole.Arn # Role used by your application

      ContainerDefinitions:
        # Web Application (uWSGI)
        - Name: !Sub ${ProjectName}-app
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-app:latest
          PortMappings:
            - ContainerPort: !Ref AppPort
              Protocol: tcp
          Cpu: 512
          Memory: 1024
          MemoryReservation: 512

          Environment:
              # Project
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: PROJECT_NAME
              Value: !Ref ProjectName
              # Amazon S3 (static files)
            - Name: AWS_STORAGE_BUCKET_NAME
              Value: !Ref StaticFilesBucket
            - Name: AWS_S3_REGION_NAME
              Value: !Ref AWS::Region
              # Database
            - Name: DB_HOST
              Value: !GetAtt RDSInstance.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt RDSInstance.Endpoint.Port
          Secrets:
            # Database credentials
            - Name: DB_ENGINE
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/database/engine
            - Name: DB_NAME
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/database/name
            - Name: DB_USER
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/database/username
            - Name: DB_PASSWORD
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/database/password
            # Django settings
            - Name: DJANGO_SETTINGS_MODULE
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/app/django_settings_module
            - Name: DEBUG_STATUS
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/app/debug_status
            - Name: DJANGO_SECRET_KEY
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/app/secret_key
            - Name: ALLOWED_HOSTS
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/app/allowed_hosts
            # Django superuser
            - Name: DJANGO_SUPERUSER_USERNAME
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/app/superuser/username
            - Name: DJANGO_SUPERUSER_PASSWORD
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/app/superuser/password
            - Name: DJANGO_SUPERUSER_EMAIL
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/app/superuser/email

          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${ProjectName}/app
          
        # Nginx Container
        - Name: !Sub ${ProjectName}-nginx
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-nginx:latest
          PortMappings:
            - ContainerPort: !Ref NginxPort
              Protocol: tcp
          Cpu: 512
          Memory: 1024
          MemoryReservation: 512
          Environment:
              # Project
            - Name: PROJECT_NAME
              Value: !Ref ProjectName
            - Name: NGINX_PORT
              Value: !Ref NginxPort
          # HealthCheck:
          #   Command:
          #     - CMD-SHELL
          #     - !Sub "curl -f http://localhost:${NginxPort}/health/ || exit 1"
          #   Interval: 60    # Check every 60 seconds
          #   Timeout: 5      # Wait up to 5 seconds for a response
          #   Retries: 3      # Allow 3 retries before marking unhealthy
          #   StartPeriod: 60 # Give the container 60 seconds to warm up before starting health checks
          DependsOn:
            - ContainerName: !Sub ${ProjectName}-app
              Condition: START
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${ProjectName}/nginx
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task


  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
    - ALBListener
    - ECRDkrVPCEndpoint
    - ECRApiVPCEndpoint
    - S3GatewayEndpoint
    Properties:
      ServiceName: !Sub ${ProjectName}-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !Sub ${ProjectName}-nginx  # Must match the container name in task definition
          ContainerPort: !Ref NginxPort
          TargetGroupArn: !Ref ALBTargetGroup
      HealthCheckGracePeriodSeconds: 60  # Gives containers time to warm up
      DeploymentConfiguration:
        # run up to twice the desired number of tasks during the deployment process.
        # prevent downtime, as ECS can start new tasks before stopping the old 
        # allows up to double the desired count during deployment
        MaximumPercent: 200
        # ensures no tasks are stopped until new ones are healthy
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true # Enables the deployment circuit breaker feature, which monitors deployments for failures
          Rollback: true # Automatically rolls back to the last stable deployment if the new deployment fails 
      # provides shell access to your running tasks
      # EnableExecuteCommand: true
      # # Automatically adds ECS-managed tags to the tasks created by this service
      # EnableECSManagedTags: true
      # # Ensures that the tags applied to the ECS service are propagated to the tasks created by the service
      # PropagateTags: SERVICE
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}

  ##################################
  # # Database
  ##################################

  # Security group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
          Description: Allow PostgreSQL access from ECS tasks
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}

  # # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet3
        - !Ref PrivateSubnet4
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}

  # # RDS Database Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      EngineVersion: '16.3'
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '20'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBName: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/database/name}}'
      MasterUsername: !Sub '{{resolve:ssm:/${ProjectName}/${Environment}/database/username}}'
      MasterUserPassword: !Sub '{{resolve:ssm-secure:/${ProjectName}/${Environment}/database/password}}'
      MultiAZ: true
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}

# IAM Role for accessing Parameter Store
  RDSParameterStoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      Policies:
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/database/*'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}

Outputs:
  ALBEndpoint:
    Description: The URL of the application load balancer
    Value: !GetAtt ALB.DNSName

  PipelineURL:
    Description: ECS Cluster URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/ecs/v2/clusters/${ProjectName}-${Environment}-cluster/services?region=${AWS::Region}

  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster

  ServiceName:
    Description: ECS Service Name
    Value: !Ref ECSService